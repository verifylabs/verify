import { Event, EventFilter, BigNumberish, BigNumber, BaseContract, Signer, CallOverrides, Overrides, ContractTransaction, PopulatedTransaction, utils, BytesLike, ContractFactory } from 'ethers';
import { Listener, Provider, TransactionRequest } from '@ethersproject/providers';
import { FunctionFragment, Result } from '@ethersproject/abi';

var _format = "hh-sol-artifact-1";
var contractName = "Verify";
var sourceName = "contracts/Verify.sol";
var abi = [
	{
		inputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		name: "contents",
		outputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "timestamp",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "createContent",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "data",
						type: "string"
					},
					{
						internalType: "string",
						name: "id",
						type: "string"
					},
					{
						internalType: "address",
						name: "owner",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "timestamp",
						type: "uint256"
					}
				],
				internalType: "struct Verify.Content",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "createReport",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "getReports",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "reports",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];
var bytecode = "0x608060405234801561001057600080fd5b506109fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a3f5fafd11610050578063a3f5fafd146100a5578063a6acce35146100c5578063f9158e99146100e857600080fd5b80631a68638a1461006c57806337e8292014610092575b600080fd5b61007f61007a366004610770565b610113565b6040519081526020015b60405180910390f35b61007f6100a0366004610770565b61013d565b6100b86100b33660046107ad565b6102d8565b604051610089919061086d565b6100d86100d3366004610770565b61043a565b60405161008994939291906108d0565b6100fb6100f6366004610912565b610587565b6040516001600160a01b039091168152602001610089565b6000806001836040516101269190610957565b908152604051908190036020019020549392505050565b6000808260405161014e9190610957565b908152602001604051809103902060030154600014156101b55760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b61022f6001836040516101c89190610957565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561022457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610206575b5050505050336105ce565b61027b5760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016101ac565b600060018360405161028d9190610957565b9081526040519081900360209081019091208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff191633179055549392505050565b61030c6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60008260405161031c9190610957565b90815260200160405180910390206003015460001461037d5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016101ac565b60408051608081018252848152602081018490523381830152426060820152905181906000906103ae908690610957565b908152602001604051809103902060008201518160000190805190602001906103d8929190610634565b5060208281015180516103f19260018501920190610634565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560609091015160039091015590505b92915050565b805160208183018101805160008252928201919093012091528054819061046090610973565b80601f016020809104026020016040519081016040528092919081815260200182805461048c90610973565b80156104d95780601f106104ae576101008083540402835291602001916104d9565b820191906000526020600020905b8154815290600101906020018083116104bc57829003601f168201915b5050505050908060010180546104ee90610973565b80601f016020809104026020016040519081016040528092919081815260200182805461051a90610973565b80156105675780601f1061053c57610100808354040283529160200191610567565b820191906000526020600020905b81548152906001019060200180831161054a57829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b815160208184018101805160018252928201918501919091209190528054829081106105b257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b835181101561062a57826001600160a01b03168482815181106105f7576105f76109ae565b60200260200101516001600160a01b03161415610618576000915050610434565b80610622816109c4565b9150506105d2565b5060019392505050565b82805461064090610973565b90600052602060002090601f01602090048101928261066257600085556106a8565b82601f1061067b57805160ff19168380011785556106a8565b828001600101855582156106a8579182015b828111156106a857825182559160200191906001019061068d565b506106b49291506106b8565b5090565b5b808211156106b457600081556001016106b9565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106f457600080fd5b813567ffffffffffffffff8082111561070f5761070f6106cd565b604051601f8301601f19908116603f01168101908282118183101715610737576107376106cd565b8160405283815286602085880101111561075057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561078257600080fd5b813567ffffffffffffffff81111561079957600080fd5b6107a5848285016106e3565b949350505050565b600080604083850312156107c057600080fd5b823567ffffffffffffffff808211156107d857600080fd5b6107e4868387016106e3565b935060208501359150808211156107fa57600080fd5b50610807858286016106e3565b9150509250929050565b60005b8381101561082c578181015183820152602001610814565b8381111561083b576000848401525b50505050565b60008151808452610859816020860160208601610811565b601f01601f19169290920160200192915050565b60208152600082516080602084015261088960a0840182610841565b90506020840151601f198483030160408501526108a68282610841565b9150506001600160a01b036040850151166060840152606084015160808401528091505092915050565b6080815260006108e36080830187610841565b82810360208401526108f58187610841565b6001600160a01b0395909516604084015250506060015292915050565b6000806040838503121561092557600080fd5b823567ffffffffffffffff81111561093c57600080fd5b610948858286016106e3565b95602094909401359450505050565b60008251610969818460208701610811565b9190910192915050565b600181811c9082168061098757607f821691505b602082108114156109a857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156109e657634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";
var deployedBytecode = "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063a3f5fafd11610050578063a3f5fafd146100a5578063a6acce35146100c5578063f9158e99146100e857600080fd5b80631a68638a1461006c57806337e8292014610092575b600080fd5b61007f61007a366004610770565b610113565b6040519081526020015b60405180910390f35b61007f6100a0366004610770565b61013d565b6100b86100b33660046107ad565b6102d8565b604051610089919061086d565b6100d86100d3366004610770565b61043a565b60405161008994939291906108d0565b6100fb6100f6366004610912565b610587565b6040516001600160a01b039091168152602001610089565b6000806001836040516101269190610957565b908152604051908190036020019020549392505050565b6000808260405161014e9190610957565b908152602001604051809103902060030154600014156101b55760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b61022f6001836040516101c89190610957565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561022457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610206575b5050505050336105ce565b61027b5760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016101ac565b600060018360405161028d9190610957565b9081526040519081900360209081019091208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff191633179055549392505050565b61030c6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60008260405161031c9190610957565b90815260200160405180910390206003015460001461037d5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016101ac565b60408051608081018252848152602081018490523381830152426060820152905181906000906103ae908690610957565b908152602001604051809103902060008201518160000190805190602001906103d8929190610634565b5060208281015180516103f19260018501920190610634565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560609091015160039091015590505b92915050565b805160208183018101805160008252928201919093012091528054819061046090610973565b80601f016020809104026020016040519081016040528092919081815260200182805461048c90610973565b80156104d95780601f106104ae576101008083540402835291602001916104d9565b820191906000526020600020905b8154815290600101906020018083116104bc57829003601f168201915b5050505050908060010180546104ee90610973565b80601f016020809104026020016040519081016040528092919081815260200182805461051a90610973565b80156105675780601f1061053c57610100808354040283529160200191610567565b820191906000526020600020905b81548152906001019060200180831161054a57829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b815160208184018101805160018252928201918501919091209190528054829081106105b257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b835181101561062a57826001600160a01b03168482815181106105f7576105f76109ae565b60200260200101516001600160a01b03161415610618576000915050610434565b80610622816109c4565b9150506105d2565b5060019392505050565b82805461064090610973565b90600052602060002090601f01602090048101928261066257600085556106a8565b82601f1061067b57805160ff19168380011785556106a8565b828001600101855582156106a8579182015b828111156106a857825182559160200191906001019061068d565b506106b49291506106b8565b5090565b5b808211156106b457600081556001016106b9565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106f457600080fd5b813567ffffffffffffffff8082111561070f5761070f6106cd565b604051601f8301601f19908116603f01168101908282118183101715610737576107376106cd565b8160405283815286602085880101111561075057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561078257600080fd5b813567ffffffffffffffff81111561079957600080fd5b6107a5848285016106e3565b949350505050565b600080604083850312156107c057600080fd5b823567ffffffffffffffff808211156107d857600080fd5b6107e4868387016106e3565b935060208501359150808211156107fa57600080fd5b50610807858286016106e3565b9150509250929050565b60005b8381101561082c578181015183820152602001610814565b8381111561083b576000848401525b50505050565b60008151808452610859816020860160208601610811565b601f01601f19169290920160200192915050565b60208152600082516080602084015261088960a0840182610841565b90506020840151601f198483030160408501526108a68282610841565b9150506001600160a01b036040850151166060840152606084015160808401528091505092915050565b6080815260006108e36080830187610841565b82810360208401526108f58187610841565b6001600160a01b0395909516604084015250506060015292915050565b6000806040838503121561092557600080fd5b823567ffffffffffffffff81111561093c57600080fd5b610948858286016106e3565b95602094909401359450505050565b60008251610969818460208701610811565b9190910192915050565b600181811c9082168061098757607f821691505b602082108114156109a857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156109e657634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";
var linkReferences = {
};
var deployedLinkReferences = {
};
var Verify$1 = {
	_format: _format,
	contractName: contractName,
	sourceName: sourceName,
	abi: abi,
	bytecode: bytecode,
	deployedBytecode: deployedBytecode,
	linkReferences: linkReferences,
	deployedLinkReferences: deployedLinkReferences
};

interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
    args: TArgsArray & TArgsObject;
}
interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {
}
interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}
declare type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>, listener: TypedListener<TEvent>): TRes;
    (eventName: string, listener: Listener): TRes;
}
declare type PromiseOrValue<T> = T | Promise<T>;

interface VerifyInterface extends utils.Interface {
    functions: {
        "contents(string)": FunctionFragment;
        "createContent(string,string)": FunctionFragment;
        "createReport(string)": FunctionFragment;
        "getReports(string)": FunctionFragment;
        "reports(string,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "contents" | "createContent" | "createReport" | "getReports" | "reports"): FunctionFragment;
    encodeFunctionData(functionFragment: "contents", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "createContent", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "createReport", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getReports", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "reports", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "contents", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createContent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createReport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReports", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
    events: {};
}
declare namespace Verify {
    type ContentStruct = {
        data: PromiseOrValue<string>;
        id: PromiseOrValue<string>;
        owner: PromiseOrValue<string>;
        timestamp: PromiseOrValue<BigNumberish>;
    };
    type ContentStructOutput = [string, string, string, BigNumber] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    };
}
interface Verify extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VerifyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        createReport(id: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        string,
        string,
        string,
        BigNumber
    ] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    }>;
    createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    createReport(id: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
        createReport(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        createReport(id: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        createReport(id: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare type VerifyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Verify__factory extends ContractFactory {
    constructor(...args: VerifyConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Verify>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Verify;
    connect(signer: Signer): Verify__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506109fa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a3f5fafd11610050578063a3f5fafd146100a5578063a6acce35146100c5578063f9158e99146100e857600080fd5b80631a68638a1461006c57806337e8292014610092575b600080fd5b61007f61007a366004610770565b610113565b6040519081526020015b60405180910390f35b61007f6100a0366004610770565b61013d565b6100b86100b33660046107ad565b6102d8565b604051610089919061086d565b6100d86100d3366004610770565b61043a565b60405161008994939291906108d0565b6100fb6100f6366004610912565b610587565b6040516001600160a01b039091168152602001610089565b6000806001836040516101269190610957565b908152604051908190036020019020549392505050565b6000808260405161014e9190610957565b908152602001604051809103902060030154600014156101b55760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b61022f6001836040516101c89190610957565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561022457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610206575b5050505050336105ce565b61027b5760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016101ac565b600060018360405161028d9190610957565b9081526040519081900360209081019091208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff191633179055549392505050565b61030c6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60008260405161031c9190610957565b90815260200160405180910390206003015460001461037d5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016101ac565b60408051608081018252848152602081018490523381830152426060820152905181906000906103ae908690610957565b908152602001604051809103902060008201518160000190805190602001906103d8929190610634565b5060208281015180516103f19260018501920190610634565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560609091015160039091015590505b92915050565b805160208183018101805160008252928201919093012091528054819061046090610973565b80601f016020809104026020016040519081016040528092919081815260200182805461048c90610973565b80156104d95780601f106104ae576101008083540402835291602001916104d9565b820191906000526020600020905b8154815290600101906020018083116104bc57829003601f168201915b5050505050908060010180546104ee90610973565b80601f016020809104026020016040519081016040528092919081815260200182805461051a90610973565b80156105675780601f1061053c57610100808354040283529160200191610567565b820191906000526020600020905b81548152906001019060200180831161054a57829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b815160208184018101805160018252928201918501919091209190528054829081106105b257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b835181101561062a57826001600160a01b03168482815181106105f7576105f76109ae565b60200260200101516001600160a01b03161415610618576000915050610434565b80610622816109c4565b9150506105d2565b5060019392505050565b82805461064090610973565b90600052602060002090601f01602090048101928261066257600085556106a8565b82601f1061067b57805160ff19168380011785556106a8565b828001600101855582156106a8579182015b828111156106a857825182559160200191906001019061068d565b506106b49291506106b8565b5090565b5b808211156106b457600081556001016106b9565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106f457600080fd5b813567ffffffffffffffff8082111561070f5761070f6106cd565b604051601f8301601f19908116603f01168101908282118183101715610737576107376106cd565b8160405283815286602085880101111561075057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60006020828403121561078257600080fd5b813567ffffffffffffffff81111561079957600080fd5b6107a5848285016106e3565b949350505050565b600080604083850312156107c057600080fd5b823567ffffffffffffffff808211156107d857600080fd5b6107e4868387016106e3565b935060208501359150808211156107fa57600080fd5b50610807858286016106e3565b9150509250929050565b60005b8381101561082c578181015183820152602001610814565b8381111561083b576000848401525b50505050565b60008151808452610859816020860160208601610811565b601f01601f19169290920160200192915050565b60208152600082516080602084015261088960a0840182610841565b90506020840151601f198483030160408501526108a68282610841565b9150506001600160a01b036040850151166060840152606084015160808401528091505092915050565b6080815260006108e36080830187610841565b82810360208401526108f58187610841565b6001600160a01b0395909516604084015250506060015292915050565b6000806040838503121561092557600080fd5b823567ffffffffffffffff81111561093c57600080fd5b610948858286016106e3565b95602094909401359450505050565b60008251610969818460208701610811565b9190910192915050565b600181811c9082168061098757607f821691505b602082108114156109a857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156109e657634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";
    static readonly abi: ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    })[];
    static createInterface(): VerifyInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Verify;
}

type index_Verify__factory = Verify__factory;
declare const index_Verify__factory: typeof Verify__factory;
declare namespace index {
  export {
    index_Verify__factory as Verify__factory,
  };
}

export { Verify, Verify__factory, Verify$1 as abi, index as factories };
