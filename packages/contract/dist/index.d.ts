import { Event, EventFilter, BigNumberish, BigNumber, BaseContract, Signer, CallOverrides, Overrides, ContractTransaction, PopulatedTransaction, utils, BytesLike, ContractFactory } from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider, TransactionRequest } from '@ethersproject/providers';

var _format = "hh-sol-artifact-1";
var contractName = "Verify";
var sourceName = "contracts/Verify.sol";
var abi = [
	{
		inputs: [
			{
				internalType: "string",
				name: "_owner",
				type: "string"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "OWNER",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		name: "contents",
		outputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "timestamp",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "contentsByAddress",
		outputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "timestamp",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "createContent",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "data",
						type: "string"
					},
					{
						internalType: "string",
						name: "id",
						type: "string"
					},
					{
						internalType: "address",
						name: "owner",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "timestamp",
						type: "uint256"
					}
				],
				internalType: "struct Verify.Content",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "createReport",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "getContent",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "data",
						type: "string"
					},
					{
						internalType: "string",
						name: "id",
						type: "string"
					},
					{
						internalType: "address",
						name: "owner",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "timestamp",
						type: "uint256"
					}
				],
				internalType: "struct Verify.Content",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "addr",
				type: "address"
			}
		],
		name: "getContentList",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "data",
						type: "string"
					},
					{
						internalType: "string",
						name: "id",
						type: "string"
					},
					{
						internalType: "address",
						name: "owner",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "timestamp",
						type: "uint256"
					}
				],
				internalType: "struct Verify.Content[]",
				name: "",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "getReports",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "reports",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];
var bytecode = "0x60806040523480156200001157600080fd5b506040516200139938038062001399833981016040819052620000349162000060565b6000620000428282620001c4565b505062000290565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200007457600080fd5b82516001600160401b03808211156200008c57600080fd5b818501915085601f830112620000a157600080fd5b815181811115620000b657620000b66200004a565b604051601f8201601f19908116603f01168101908382118183101715620000e157620000e16200004a565b816040528281528886848701011115620000fa57600080fd5b600093505b828410156200011e5784840186015181850187015292850192620000ff565b600086848301015280965050505050505092915050565b600181811c908216806200014a57607f821691505b6020821081036200016b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001bf57600081815260208120601f850160051c810160208610156200019a5750805b601f850160051c820191505b81811015620001bb57828155600101620001a6565b5050505b505050565b81516001600160401b03811115620001e057620001e06200004a565b620001f881620001f1845462000135565b8462000171565b602080601f831160018114620002305760008415620002175750858301515b600019600386901b1c1916600185901b178555620001bb565b600085815260208120601f198616915b82811015620002615788860151825594840194600190910190840162000240565b5085821015620002805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6110f980620002a06000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a6acce3511610076578063cbba39671161005b578063cbba39671461015d578063d611bf9614610170578063f9158e991461018357600080fd5b8063a6acce351461011a578063b160e0341461013d57600080fd5b8063117803e3146100a85780631a68638a146100c65780634dd0e8af146100e75780638c9e1f3c146100fa575b600080fd5b6100b06101ae565b6040516100bd9190610bd9565b60405180910390f35b6100d96100d4366004610c96565b61023c565b6040519081526020016100bd565b6100d96100f5366004610cef565b610266565b61010d610108366004610c96565b61040b565b6040516100bd9190610d95565b61012d610128366004610c96565b6105b0565b6040516100bd9493929190610da8565b61015061014b366004610dea565b6106fd565b6040516100bd9190610e05565b61012d61016b366004610e67565b6108b9565b61010d61017e366004610e91565b6108f9565b610196610191366004610f05565b610add565b6040516001600160a01b0390911681526020016100bd565b600080546101bb90610f4a565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610f4a565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b505050505081565b60008060038360405161024f9190610f84565b908152604051908190036020019020549392505050565b60006002836040516102789190610f84565b9081526020016040518091039020600301546000036102de5760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6103586003846040516102f19190610f84565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561034d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161032f575b505050505083610b24565b6103a45760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016102d5565b60006003846040516103b69190610f84565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b61043f6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028260405161044f9190610f84565b908152602001604051809103902060405180608001604052908160008201805461047890610f4a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a490610f4a565b80156104f15780601f106104c6576101008083540402835291602001916104f1565b820191906000526020600020905b8154815290600101906020018083116104d457829003601f168201915b5050505050815260200160018201805461050a90610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461053690610f4a565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906105d690610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461060290610f4a565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b50505050509080600101805461066490610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461069090610f4a565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835260609492939192909184015b828210156108ae578382906000526020600020906004020160405180608001604052908160008201805461076890610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461079490610f4a565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050505081526020016001820180546107fa90610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461082690610f4a565b80156108735780601f1061084857610100808354040283529160200191610873565b820191906000526020600020905b81548152906001019060200180831161085657829003601f168201915b505050918352505060028201546001600160a01b03166020808301919091526003909201546040909101529082526001929092019101610735565b505050509050919050565b600160205281600052604060002081815481106108d557600080fd5b9060005260206000209060040201600091509150508060000180546105d690610f4a565b61092d6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161093d9190610f84565b90815260200160405180910390206003015460001461099e5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016102d5565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906109d8908790610f84565b908152604051908190036020019020815181906109f59082610fef565b5060208201516001820190610a0a9082610fef565b5060408281015160028301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905560609093015160039092019190915590841660009081526001602081815292822080549182018155825291902082518392600402909101908190610a809082610fef565b5060208201516001820190610a959082610fef565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606090910151600390910155949350505050565b81516020818401810180516003825292820191850191909120919052805482908110610b0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610b7f57826001600160a01b0316848281518110610b4d57610b4d6110af565b60200260200101516001600160a01b031603610b6d576000915050610405565b80610b77816110c5565b915050610b28565b5060019392505050565b60005b83811015610ba4578181015183820152602001610b8c565b50506000910152565b60008151808452610bc5816020860160208601610b89565b601f01601f19169290920160200192915050565b602081526000610bec6020830184610bad565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610c1a57600080fd5b813567ffffffffffffffff80821115610c3557610c35610bf3565b604051601f8301601f19908116603f01168101908282118183101715610c5d57610c5d610bf3565b81604052838152866020858801011115610c7657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610ca857600080fd5b813567ffffffffffffffff811115610cbf57600080fd5b610ccb84828501610c09565b949350505050565b80356001600160a01b0381168114610cea57600080fd5b919050565b60008060408385031215610d0257600080fd5b823567ffffffffffffffff811115610d1957600080fd5b610d2585828601610c09565b925050610d3460208401610cd3565b90509250929050565b6000815160808452610d526080850182610bad565b905060208301518482036020860152610d6b8282610bad565b9150506001600160a01b036040840151166040850152606083015160608501528091505092915050565b602081526000610bec6020830184610d3d565b608081526000610dbb6080830187610bad565b8281036020840152610dcd8187610bad565b6001600160a01b0395909516604084015250506060015292915050565b600060208284031215610dfc57600080fd5b610bec82610cd3565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e5a57603f19888603018452610e48858351610d3d565b94509285019290850190600101610e2c565b5092979650505050505050565b60008060408385031215610e7a57600080fd5b610e8383610cd3565b946020939093013593505050565b600080600060608486031215610ea657600080fd5b833567ffffffffffffffff80821115610ebe57600080fd5b610eca87838801610c09565b94506020860135915080821115610ee057600080fd5b50610eed86828701610c09565b925050610efc60408501610cd3565b90509250925092565b60008060408385031215610f1857600080fd5b823567ffffffffffffffff811115610f2f57600080fd5b610f3b85828601610c09565b95602094909401359450505050565b600181811c90821680610f5e57607f821691505b602082108103610f7e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610f96818460208701610b89565b9190910192915050565b601f821115610fea57600081815260208120601f850160051c81016020861015610fc75750805b601f850160051c820191505b81811015610fe657828155600101610fd3565b5050505b505050565b815167ffffffffffffffff81111561100957611009610bf3565b61101d816110178454610f4a565b84610fa0565b602080601f831160018114611052576000841561103a5750858301515b600019600386901b1c1916600185901b178555610fe6565b600085815260208120601f198616915b8281101561108157888601518255948401946001909101908401611062565b508582101561109f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016110e557634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a";
var deployedBytecode = "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a6acce3511610076578063cbba39671161005b578063cbba39671461015d578063d611bf9614610170578063f9158e991461018357600080fd5b8063a6acce351461011a578063b160e0341461013d57600080fd5b8063117803e3146100a85780631a68638a146100c65780634dd0e8af146100e75780638c9e1f3c146100fa575b600080fd5b6100b06101ae565b6040516100bd9190610bd9565b60405180910390f35b6100d96100d4366004610c96565b61023c565b6040519081526020016100bd565b6100d96100f5366004610cef565b610266565b61010d610108366004610c96565b61040b565b6040516100bd9190610d95565b61012d610128366004610c96565b6105b0565b6040516100bd9493929190610da8565b61015061014b366004610dea565b6106fd565b6040516100bd9190610e05565b61012d61016b366004610e67565b6108b9565b61010d61017e366004610e91565b6108f9565b610196610191366004610f05565b610add565b6040516001600160a01b0390911681526020016100bd565b600080546101bb90610f4a565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610f4a565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b505050505081565b60008060038360405161024f9190610f84565b908152604051908190036020019020549392505050565b60006002836040516102789190610f84565b9081526020016040518091039020600301546000036102de5760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6103586003846040516102f19190610f84565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561034d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161032f575b505050505083610b24565b6103a45760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016102d5565b60006003846040516103b69190610f84565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b61043f6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028260405161044f9190610f84565b908152602001604051809103902060405180608001604052908160008201805461047890610f4a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a490610f4a565b80156104f15780601f106104c6576101008083540402835291602001916104f1565b820191906000526020600020905b8154815290600101906020018083116104d457829003601f168201915b5050505050815260200160018201805461050a90610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461053690610f4a565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906105d690610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461060290610f4a565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b50505050509080600101805461066490610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461069090610f4a565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835260609492939192909184015b828210156108ae578382906000526020600020906004020160405180608001604052908160008201805461076890610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461079490610f4a565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050505081526020016001820180546107fa90610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461082690610f4a565b80156108735780601f1061084857610100808354040283529160200191610873565b820191906000526020600020905b81548152906001019060200180831161085657829003601f168201915b505050918352505060028201546001600160a01b03166020808301919091526003909201546040909101529082526001929092019101610735565b505050509050919050565b600160205281600052604060002081815481106108d557600080fd5b9060005260206000209060040201600091509150508060000180546105d690610f4a565b61092d6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161093d9190610f84565b90815260200160405180910390206003015460001461099e5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016102d5565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906109d8908790610f84565b908152604051908190036020019020815181906109f59082610fef565b5060208201516001820190610a0a9082610fef565b5060408281015160028301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905560609093015160039092019190915590841660009081526001602081815292822080549182018155825291902082518392600402909101908190610a809082610fef565b5060208201516001820190610a959082610fef565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606090910151600390910155949350505050565b81516020818401810180516003825292820191850191909120919052805482908110610b0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610b7f57826001600160a01b0316848281518110610b4d57610b4d6110af565b60200260200101516001600160a01b031603610b6d576000915050610405565b80610b77816110c5565b915050610b28565b5060019392505050565b60005b83811015610ba4578181015183820152602001610b8c565b50506000910152565b60008151808452610bc5816020860160208601610b89565b601f01601f19169290920160200192915050565b602081526000610bec6020830184610bad565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610c1a57600080fd5b813567ffffffffffffffff80821115610c3557610c35610bf3565b604051601f8301601f19908116603f01168101908282118183101715610c5d57610c5d610bf3565b81604052838152866020858801011115610c7657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610ca857600080fd5b813567ffffffffffffffff811115610cbf57600080fd5b610ccb84828501610c09565b949350505050565b80356001600160a01b0381168114610cea57600080fd5b919050565b60008060408385031215610d0257600080fd5b823567ffffffffffffffff811115610d1957600080fd5b610d2585828601610c09565b925050610d3460208401610cd3565b90509250929050565b6000815160808452610d526080850182610bad565b905060208301518482036020860152610d6b8282610bad565b9150506001600160a01b036040840151166040850152606083015160608501528091505092915050565b602081526000610bec6020830184610d3d565b608081526000610dbb6080830187610bad565b8281036020840152610dcd8187610bad565b6001600160a01b0395909516604084015250506060015292915050565b600060208284031215610dfc57600080fd5b610bec82610cd3565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e5a57603f19888603018452610e48858351610d3d565b94509285019290850190600101610e2c565b5092979650505050505050565b60008060408385031215610e7a57600080fd5b610e8383610cd3565b946020939093013593505050565b600080600060608486031215610ea657600080fd5b833567ffffffffffffffff80821115610ebe57600080fd5b610eca87838801610c09565b94506020860135915080821115610ee057600080fd5b50610eed86828701610c09565b925050610efc60408501610cd3565b90509250925092565b60008060408385031215610f1857600080fd5b823567ffffffffffffffff811115610f2f57600080fd5b610f3b85828601610c09565b95602094909401359450505050565b600181811c90821680610f5e57607f821691505b602082108103610f7e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610f96818460208701610b89565b9190910192915050565b601f821115610fea57600081815260208120601f850160051c81016020861015610fc75750805b601f850160051c820191505b81811015610fe657828155600101610fd3565b5050505b505050565b815167ffffffffffffffff81111561100957611009610bf3565b61101d816110178454610f4a565b84610fa0565b602080601f831160018114611052576000841561103a5750858301515b600019600386901b1c1916600185901b178555610fe6565b600085815260208120601f198616915b8281101561108157888601518255948401946001909101908401611062565b508582101561109f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016110e557634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a";
var linkReferences = {
};
var deployedLinkReferences = {
};
var Verify$1 = {
	_format: _format,
	contractName: contractName,
	sourceName: sourceName,
	abi: abi,
	bytecode: bytecode,
	deployedBytecode: deployedBytecode,
	linkReferences: linkReferences,
	deployedLinkReferences: deployedLinkReferences
};

interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
    args: TArgsArray & TArgsObject;
}
interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {
}
interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}
declare type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>, listener: TypedListener<TEvent>): TRes;
    (eventName: string, listener: Listener): TRes;
}
declare type PromiseOrValue<T> = T | Promise<T>;

interface VerifyInterface extends utils.Interface {
    functions: {
        "OWNER()": FunctionFragment;
        "contents(string)": FunctionFragment;
        "contentsByAddress(address,uint256)": FunctionFragment;
        "createContent(string,string,address)": FunctionFragment;
        "createReport(string,address)": FunctionFragment;
        "getContent(string)": FunctionFragment;
        "getContentList(address)": FunctionFragment;
        "getReports(string)": FunctionFragment;
        "reports(string,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "OWNER" | "contents" | "contentsByAddress" | "createContent" | "createReport" | "getContent" | "getContentList" | "getReports" | "reports"): FunctionFragment;
    encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
    encodeFunctionData(functionFragment: "contents", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "contentsByAddress", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "createContent", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "createReport", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getContent", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getContentList", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getReports", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "reports", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contents", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contentsByAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createContent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createReport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getContentList", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReports", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
    events: {};
}
declare namespace Verify {
    type ContentStruct = {
        data: PromiseOrValue<string>;
        id: PromiseOrValue<string>;
        owner: PromiseOrValue<string>;
        timestamp: PromiseOrValue<BigNumberish>;
    };
    type ContentStructOutput = [string, string, string, BigNumber] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    };
}
interface Verify extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VerifyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        OWNER(overrides?: CallOverrides): Promise<[string]>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        contentsByAddress(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[Verify.ContentStructOutput]>;
        getContentList(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[Verify.ContentStructOutput[]]>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    OWNER(overrides?: CallOverrides): Promise<string>;
    contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        string,
        string,
        string,
        BigNumber
    ] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    }>;
    contentsByAddress(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
        string,
        string,
        string,
        BigNumber
    ] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    }>;
    createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
    getContentList(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput[]>;
    getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        OWNER(overrides?: CallOverrides): Promise<string>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        contentsByAddress(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
        getContentList(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput[]>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        OWNER(overrides?: CallOverrides): Promise<BigNumber>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        contentsByAddress(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getContentList(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        contentsByAddress(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getContentList(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare type VerifyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Verify__factory extends ContractFactory {
    constructor(...args: VerifyConstructorParams);
    deploy(_owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Verify>;
    getDeployTransaction(_owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Verify;
    connect(signer: Signer): Verify__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b506040516200139938038062001399833981016040819052620000349162000060565b6000620000428282620001c4565b505062000290565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200007457600080fd5b82516001600160401b03808211156200008c57600080fd5b818501915085601f830112620000a157600080fd5b815181811115620000b657620000b66200004a565b604051601f8201601f19908116603f01168101908382118183101715620000e157620000e16200004a565b816040528281528886848701011115620000fa57600080fd5b600093505b828410156200011e5784840186015181850187015292850192620000ff565b600086848301015280965050505050505092915050565b600181811c908216806200014a57607f821691505b6020821081036200016b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001bf57600081815260208120601f850160051c810160208610156200019a5750805b601f850160051c820191505b81811015620001bb57828155600101620001a6565b5050505b505050565b81516001600160401b03811115620001e057620001e06200004a565b620001f881620001f1845462000135565b8462000171565b602080601f831160018114620002305760008415620002175750858301515b600019600386901b1c1916600185901b178555620001bb565b600085815260208120601f198616915b82811015620002615788860151825594840194600190910190840162000240565b5085821015620002805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6110f980620002a06000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a6acce3511610076578063cbba39671161005b578063cbba39671461015d578063d611bf9614610170578063f9158e991461018357600080fd5b8063a6acce351461011a578063b160e0341461013d57600080fd5b8063117803e3146100a85780631a68638a146100c65780634dd0e8af146100e75780638c9e1f3c146100fa575b600080fd5b6100b06101ae565b6040516100bd9190610bd9565b60405180910390f35b6100d96100d4366004610c96565b61023c565b6040519081526020016100bd565b6100d96100f5366004610cef565b610266565b61010d610108366004610c96565b61040b565b6040516100bd9190610d95565b61012d610128366004610c96565b6105b0565b6040516100bd9493929190610da8565b61015061014b366004610dea565b6106fd565b6040516100bd9190610e05565b61012d61016b366004610e67565b6108b9565b61010d61017e366004610e91565b6108f9565b610196610191366004610f05565b610add565b6040516001600160a01b0390911681526020016100bd565b600080546101bb90610f4a565b80601f01602080910402602001604051908101604052809291908181526020018280546101e790610f4a565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b505050505081565b60008060038360405161024f9190610f84565b908152604051908190036020019020549392505050565b60006002836040516102789190610f84565b9081526020016040518091039020600301546000036102de5760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6103586003846040516102f19190610f84565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561034d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161032f575b505050505083610b24565b6103a45760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016102d5565b60006003846040516103b69190610f84565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b61043f6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028260405161044f9190610f84565b908152602001604051809103902060405180608001604052908160008201805461047890610f4a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a490610f4a565b80156104f15780601f106104c6576101008083540402835291602001916104f1565b820191906000526020600020905b8154815290600101906020018083116104d457829003601f168201915b5050505050815260200160018201805461050a90610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461053690610f4a565b80156105835780601f1061055857610100808354040283529160200191610583565b820191906000526020600020905b81548152906001019060200180831161056657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906105d690610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461060290610f4a565b801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b50505050509080600101805461066490610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461069090610f4a565b80156106dd5780601f106106b2576101008083540402835291602001916106dd565b820191906000526020600020905b8154815290600101906020018083116106c057829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835260609492939192909184015b828210156108ae578382906000526020600020906004020160405180608001604052908160008201805461076890610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461079490610f4a565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050505081526020016001820180546107fa90610f4a565b80601f016020809104026020016040519081016040528092919081815260200182805461082690610f4a565b80156108735780601f1061084857610100808354040283529160200191610873565b820191906000526020600020905b81548152906001019060200180831161085657829003601f168201915b505050918352505060028201546001600160a01b03166020808301919091526003909201546040909101529082526001929092019101610735565b505050509050919050565b600160205281600052604060002081815481106108d557600080fd5b9060005260206000209060040201600091509150508060000180546105d690610f4a565b61092d6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161093d9190610f84565b90815260200160405180910390206003015460001461099e5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016102d5565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906109d8908790610f84565b908152604051908190036020019020815181906109f59082610fef565b5060208201516001820190610a0a9082610fef565b5060408281015160028301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905560609093015160039092019190915590841660009081526001602081815292822080549182018155825291902082518392600402909101908190610a809082610fef565b5060208201516001820190610a959082610fef565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606090910151600390910155949350505050565b81516020818401810180516003825292820191850191909120919052805482908110610b0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610b7f57826001600160a01b0316848281518110610b4d57610b4d6110af565b60200260200101516001600160a01b031603610b6d576000915050610405565b80610b77816110c5565b915050610b28565b5060019392505050565b60005b83811015610ba4578181015183820152602001610b8c565b50506000910152565b60008151808452610bc5816020860160208601610b89565b601f01601f19169290920160200192915050565b602081526000610bec6020830184610bad565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610c1a57600080fd5b813567ffffffffffffffff80821115610c3557610c35610bf3565b604051601f8301601f19908116603f01168101908282118183101715610c5d57610c5d610bf3565b81604052838152866020858801011115610c7657600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610ca857600080fd5b813567ffffffffffffffff811115610cbf57600080fd5b610ccb84828501610c09565b949350505050565b80356001600160a01b0381168114610cea57600080fd5b919050565b60008060408385031215610d0257600080fd5b823567ffffffffffffffff811115610d1957600080fd5b610d2585828601610c09565b925050610d3460208401610cd3565b90509250929050565b6000815160808452610d526080850182610bad565b905060208301518482036020860152610d6b8282610bad565b9150506001600160a01b036040840151166040850152606083015160608501528091505092915050565b602081526000610bec6020830184610d3d565b608081526000610dbb6080830187610bad565b8281036020840152610dcd8187610bad565b6001600160a01b0395909516604084015250506060015292915050565b600060208284031215610dfc57600080fd5b610bec82610cd3565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e5a57603f19888603018452610e48858351610d3d565b94509285019290850190600101610e2c565b5092979650505050505050565b60008060408385031215610e7a57600080fd5b610e8383610cd3565b946020939093013593505050565b600080600060608486031215610ea657600080fd5b833567ffffffffffffffff80821115610ebe57600080fd5b610eca87838801610c09565b94506020860135915080821115610ee057600080fd5b50610eed86828701610c09565b925050610efc60408501610cd3565b90509250925092565b60008060408385031215610f1857600080fd5b823567ffffffffffffffff811115610f2f57600080fd5b610f3b85828601610c09565b95602094909401359450505050565b600181811c90821680610f5e57607f821691505b602082108103610f7e57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610f96818460208701610b89565b9190910192915050565b601f821115610fea57600081815260208120601f850160051c81016020861015610fc75750805b601f850160051c820191505b81811015610fe657828155600101610fd3565b5050505b505050565b815167ffffffffffffffff81111561100957611009610bf3565b61101d816110178454610f4a565b84610fa0565b602080601f831160018114611052576000841561103a5750858301515b600019600386901b1c1916600185901b178555610fe6565b600085815260208120601f198616915b8281101561108157888601518255948401946001909101908401611062565b508582101561109f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000600182016110e557634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a";
    static readonly abi: ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        name?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    })[];
    static createInterface(): VerifyInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Verify;
}

type index_Verify__factory = Verify__factory;
declare const index_Verify__factory: typeof Verify__factory;
declare namespace index {
  export {
    index_Verify__factory as Verify__factory,
  };
}

export { Verify, Verify__factory, Verify$1 as abi, index as factories };
