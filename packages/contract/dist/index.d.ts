import { Event, EventFilter, BigNumberish, BigNumber, BaseContract, Signer, CallOverrides, Overrides, ContractTransaction, PopulatedTransaction, utils, BytesLike, ContractFactory } from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider, TransactionRequest } from '@ethersproject/providers';

var _format = "hh-sol-artifact-1";
var contractName = "Verify";
var sourceName = "contracts/Verify.sol";
var abi = [
	{
		inputs: [
			{
				internalType: "string",
				name: "_owner",
				type: "string"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "OWNER",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "allContents",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		name: "contents",
		outputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "timestamp",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "data",
				type: "string"
			},
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "createContent",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "data",
						type: "string"
					},
					{
						internalType: "string",
						name: "id",
						type: "string"
					},
					{
						internalType: "address",
						name: "owner",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "timestamp",
						type: "uint256"
					}
				],
				internalType: "struct Verify.Content",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			},
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "createReport",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "getContent",
		outputs: [
			{
				components: [
					{
						internalType: "string",
						name: "data",
						type: "string"
					},
					{
						internalType: "string",
						name: "id",
						type: "string"
					},
					{
						internalType: "address",
						name: "owner",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "timestamp",
						type: "uint256"
					}
				],
				internalType: "struct Verify.Content",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getContents",
		outputs: [
			{
				internalType: "string[]",
				name: "",
				type: "string[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "id",
				type: "string"
			}
		],
		name: "getReports",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "reports",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];
var bytecode = "0x60806040523480156200001157600080fd5b506040516200121938038062001219833981016040819052620000349162000060565b6000620000428282620001c4565b505062000290565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200007457600080fd5b82516001600160401b03808211156200008c57600080fd5b818501915085601f830112620000a157600080fd5b815181811115620000b657620000b66200004a565b604051601f8201601f19908116603f01168101908382118183101715620000e157620000e16200004a565b816040528281528886848701011115620000fa57600080fd5b600093505b828410156200011e5784840186015181850187015292850192620000ff565b600086848301015280965050505050505092915050565b600181811c908216806200014a57607f821691505b6020821081036200016b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001bf57600081815260208120601f850160051c810160208610156200019a5750805b601f850160051c820191505b81811015620001bb57828155600101620001a6565b5050505b505050565b81516001600160401b03811115620001e057620001e06200004a565b620001f881620001f1845462000135565b8462000171565b602080601f831160018114620002305760008415620002175750858301515b600019600386901b1c1916600185901b178555620001bb565b600085815260208120601f198616915b82811015620002615788860151825594840194600190910190840162000240565b5085821015620002805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610f7980620002a06000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80634dd0e8af11610076578063a6acce351161005b578063a6acce3514610142578063d611bf9614610165578063f9158e991461017857600080fd5b80634dd0e8af1461010f5780638c9e1f3c1461012257600080fd5b80630a9bbe22146100a8578063117803e3146100d15780631a68638a146100d957806323677ae2146100fa575b600080fd5b6100bb6100b6366004610a3d565b6101a3565b6040516100c89190610aa6565b60405180910390f35b6100bb61024f565b6100ec6100e7366004610b63565b61025c565b6040519081526020016100c8565b610102610286565b6040516100c89190610ba0565b6100ec61011d366004610c1e565b61035f565b610135610130366004610b63565b610504565b6040516100c89190610c6c565b610155610150366004610b63565b6106a9565b6040516100c89493929190610ccf565b610135610173366004610d11565b6107f6565b61018b610186366004610d85565b610991565b6040516001600160a01b0390911681526020016100c8565b600181815481106101b357600080fd5b9060005260206000200160009150905080546101ce90610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546101fa90610dca565b80156102475780601f1061021c57610100808354040283529160200191610247565b820191906000526020600020905b81548152906001019060200180831161022a57829003601f168201915b505050505081565b600080546101ce90610dca565b60008060038360405161026f9190610e04565b908152604051908190036020019020549392505050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156103565783829060005260206000200180546102c990610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546102f590610dca565b80156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b5050505050815260200190600101906102aa565b50505050905090565b60006002836040516103719190610e04565b9081526020016040518091039020600301546000036103d75760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6104516003846040516103ea9190610e04565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561044657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610428575b5050505050836109d8565b61049d5760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016103ce565b60006003846040516104af9190610e04565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b6105386040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b6002826040516105489190610e04565b908152602001604051809103902060405180608001604052908160008201805461057190610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90610dca565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b5050505050815260200160018201805461060390610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90610dca565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906106cf90610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546106fb90610dca565b80156107485780601f1061071d57610100808354040283529160200191610748565b820191906000526020600020905b81548152906001019060200180831161072b57829003601f168201915b50505050509080600101805461075d90610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461078990610dca565b80156107d65780601f106107ab576101008083540402835291602001916107d6565b820191906000526020600020905b8154815290600101906020018083116107b957829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b61082a6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161083a9190610e04565b90815260200160405180910390206003015460001461089b5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016103ce565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906108d5908790610e04565b908152604051908190036020019020815181906108f29082610e6f565b50602082015160018201906109079082610e6f565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560609091015160039091015560208101516001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601906109889082610e6f565b50949350505050565b815160208184018101805160038252928201918501919091209190528054829081106109bc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610a3357826001600160a01b0316848281518110610a0157610a01610f2f565b60200260200101516001600160a01b031603610a215760009150506104fe565b80610a2b81610f45565b9150506109dc565b5060019392505050565b600060208284031215610a4f57600080fd5b5035919050565b60005b83811015610a71578181015183820152602001610a59565b50506000910152565b60008151808452610a92816020860160208601610a56565b601f01601f19169290920160200192915050565b602081526000610ab96020830184610a7a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ae757600080fd5b813567ffffffffffffffff80821115610b0257610b02610ac0565b604051601f8301601f19908116603f01168101908282118183101715610b2a57610b2a610ac0565b81604052838152866020858801011115610b4357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610b7557600080fd5b813567ffffffffffffffff811115610b8c57600080fd5b610b9884828501610ad6565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bf557603f19888603018452610be3858351610a7a565b94509285019290850190600101610bc7565b5092979650505050505050565b80356001600160a01b0381168114610c1957600080fd5b919050565b60008060408385031215610c3157600080fd5b823567ffffffffffffffff811115610c4857600080fd5b610c5485828601610ad6565b925050610c6360208401610c02565b90509250929050565b602081526000825160806020840152610c8860a0840182610a7a565b90506020840151601f19848303016040850152610ca58282610a7a565b9150506001600160a01b036040850151166060840152606084015160808401528091505092915050565b608081526000610ce26080830187610a7a565b8281036020840152610cf48187610a7a565b6001600160a01b0395909516604084015250506060015292915050565b600080600060608486031215610d2657600080fd5b833567ffffffffffffffff80821115610d3e57600080fd5b610d4a87838801610ad6565b94506020860135915080821115610d6057600080fd5b50610d6d86828701610ad6565b925050610d7c60408501610c02565b90509250925092565b60008060408385031215610d9857600080fd5b823567ffffffffffffffff811115610daf57600080fd5b610dbb85828601610ad6565b95602094909401359450505050565b600181811c90821680610dde57607f821691505b602082108103610dfe57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610e16818460208701610a56565b9190910192915050565b601f821115610e6a57600081815260208120601f850160051c81016020861015610e475750805b601f850160051c820191505b81811015610e6657828155600101610e53565b5050505b505050565b815167ffffffffffffffff811115610e8957610e89610ac0565b610e9d81610e978454610dca565b84610e20565b602080601f831160018114610ed25760008415610eba5750858301515b600019600386901b1c1916600185901b178555610e66565b600085815260208120601f198616915b82811015610f0157888601518255948401946001909101908401610ee2565b5085821015610f1f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201610f6557634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a";
var deployedBytecode = "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80634dd0e8af11610076578063a6acce351161005b578063a6acce3514610142578063d611bf9614610165578063f9158e991461017857600080fd5b80634dd0e8af1461010f5780638c9e1f3c1461012257600080fd5b80630a9bbe22146100a8578063117803e3146100d15780631a68638a146100d957806323677ae2146100fa575b600080fd5b6100bb6100b6366004610a3d565b6101a3565b6040516100c89190610aa6565b60405180910390f35b6100bb61024f565b6100ec6100e7366004610b63565b61025c565b6040519081526020016100c8565b610102610286565b6040516100c89190610ba0565b6100ec61011d366004610c1e565b61035f565b610135610130366004610b63565b610504565b6040516100c89190610c6c565b610155610150366004610b63565b6106a9565b6040516100c89493929190610ccf565b610135610173366004610d11565b6107f6565b61018b610186366004610d85565b610991565b6040516001600160a01b0390911681526020016100c8565b600181815481106101b357600080fd5b9060005260206000200160009150905080546101ce90610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546101fa90610dca565b80156102475780601f1061021c57610100808354040283529160200191610247565b820191906000526020600020905b81548152906001019060200180831161022a57829003601f168201915b505050505081565b600080546101ce90610dca565b60008060038360405161026f9190610e04565b908152604051908190036020019020549392505050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156103565783829060005260206000200180546102c990610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546102f590610dca565b80156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b5050505050815260200190600101906102aa565b50505050905090565b60006002836040516103719190610e04565b9081526020016040518091039020600301546000036103d75760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6104516003846040516103ea9190610e04565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561044657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610428575b5050505050836109d8565b61049d5760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016103ce565b60006003846040516104af9190610e04565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b6105386040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b6002826040516105489190610e04565b908152602001604051809103902060405180608001604052908160008201805461057190610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90610dca565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b5050505050815260200160018201805461060390610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90610dca565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906106cf90610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546106fb90610dca565b80156107485780601f1061071d57610100808354040283529160200191610748565b820191906000526020600020905b81548152906001019060200180831161072b57829003601f168201915b50505050509080600101805461075d90610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461078990610dca565b80156107d65780601f106107ab576101008083540402835291602001916107d6565b820191906000526020600020905b8154815290600101906020018083116107b957829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b61082a6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161083a9190610e04565b90815260200160405180910390206003015460001461089b5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016103ce565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906108d5908790610e04565b908152604051908190036020019020815181906108f29082610e6f565b50602082015160018201906109079082610e6f565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560609091015160039091015560208101516001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601906109889082610e6f565b50949350505050565b815160208184018101805160038252928201918501919091209190528054829081106109bc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610a3357826001600160a01b0316848281518110610a0157610a01610f2f565b60200260200101516001600160a01b031603610a215760009150506104fe565b80610a2b81610f45565b9150506109dc565b5060019392505050565b600060208284031215610a4f57600080fd5b5035919050565b60005b83811015610a71578181015183820152602001610a59565b50506000910152565b60008151808452610a92816020860160208601610a56565b601f01601f19169290920160200192915050565b602081526000610ab96020830184610a7a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ae757600080fd5b813567ffffffffffffffff80821115610b0257610b02610ac0565b604051601f8301601f19908116603f01168101908282118183101715610b2a57610b2a610ac0565b81604052838152866020858801011115610b4357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610b7557600080fd5b813567ffffffffffffffff811115610b8c57600080fd5b610b9884828501610ad6565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bf557603f19888603018452610be3858351610a7a565b94509285019290850190600101610bc7565b5092979650505050505050565b80356001600160a01b0381168114610c1957600080fd5b919050565b60008060408385031215610c3157600080fd5b823567ffffffffffffffff811115610c4857600080fd5b610c5485828601610ad6565b925050610c6360208401610c02565b90509250929050565b602081526000825160806020840152610c8860a0840182610a7a565b90506020840151601f19848303016040850152610ca58282610a7a565b9150506001600160a01b036040850151166060840152606084015160808401528091505092915050565b608081526000610ce26080830187610a7a565b8281036020840152610cf48187610a7a565b6001600160a01b0395909516604084015250506060015292915050565b600080600060608486031215610d2657600080fd5b833567ffffffffffffffff80821115610d3e57600080fd5b610d4a87838801610ad6565b94506020860135915080821115610d6057600080fd5b50610d6d86828701610ad6565b925050610d7c60408501610c02565b90509250925092565b60008060408385031215610d9857600080fd5b823567ffffffffffffffff811115610daf57600080fd5b610dbb85828601610ad6565b95602094909401359450505050565b600181811c90821680610dde57607f821691505b602082108103610dfe57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610e16818460208701610a56565b9190910192915050565b601f821115610e6a57600081815260208120601f850160051c81016020861015610e475750805b601f850160051c820191505b81811015610e6657828155600101610e53565b5050505b505050565b815167ffffffffffffffff811115610e8957610e89610ac0565b610e9d81610e978454610dca565b84610e20565b602080601f831160018114610ed25760008415610eba5750858301515b600019600386901b1c1916600185901b178555610e66565b600085815260208120601f198616915b82811015610f0157888601518255948401946001909101908401610ee2565b5085821015610f1f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201610f6557634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a";
var linkReferences = {
};
var deployedLinkReferences = {
};
var Verify$1 = {
	_format: _format,
	contractName: contractName,
	sourceName: sourceName,
	abi: abi,
	bytecode: bytecode,
	deployedBytecode: deployedBytecode,
	linkReferences: linkReferences,
	deployedLinkReferences: deployedLinkReferences
};

interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends Event {
    args: TArgsArray & TArgsObject;
}
interface TypedEventFilter<_TEvent extends TypedEvent> extends EventFilter {
}
interface TypedListener<TEvent extends TypedEvent> {
    (...listenerArg: [...__TypechainArgsArray<TEvent>, TEvent]): void;
}
declare type __TypechainArgsArray<T> = T extends TypedEvent<infer U> ? U : never;
interface OnEvent<TRes> {
    <TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>, listener: TypedListener<TEvent>): TRes;
    (eventName: string, listener: Listener): TRes;
}
declare type PromiseOrValue<T> = T | Promise<T>;

interface VerifyInterface extends utils.Interface {
    functions: {
        "OWNER()": FunctionFragment;
        "allContents(uint256)": FunctionFragment;
        "contents(string)": FunctionFragment;
        "createContent(string,string,address)": FunctionFragment;
        "createReport(string,address)": FunctionFragment;
        "getContent(string)": FunctionFragment;
        "getContents()": FunctionFragment;
        "getReports(string)": FunctionFragment;
        "reports(string,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "OWNER" | "allContents" | "contents" | "createContent" | "createReport" | "getContent" | "getContents" | "getReports" | "reports"): FunctionFragment;
    encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
    encodeFunctionData(functionFragment: "allContents", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "contents", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "createContent", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "createReport", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getContent", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getContents", values?: undefined): string;
    encodeFunctionData(functionFragment: "getReports", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "reports", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allContents", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contents", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createContent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createReport", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getContents", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReports", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reports", data: BytesLike): Result;
    events: {};
}
declare namespace Verify {
    type ContentStruct = {
        data: PromiseOrValue<string>;
        id: PromiseOrValue<string>;
        owner: PromiseOrValue<string>;
        timestamp: PromiseOrValue<BigNumberish>;
    };
    type ContentStructOutput = [string, string, string, BigNumber] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    };
}
interface Verify extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: VerifyInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        OWNER(overrides?: CallOverrides): Promise<[string]>;
        allContents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[Verify.ContentStructOutput]>;
        getContents(overrides?: CallOverrides): Promise<[string[]]>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    OWNER(overrides?: CallOverrides): Promise<string>;
    allContents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        string,
        string,
        string,
        BigNumber
    ] & {
        data: string;
        id: string;
        owner: string;
        timestamp: BigNumber;
    }>;
    createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
    getContents(overrides?: CallOverrides): Promise<string[]>;
    getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        OWNER(overrides?: CallOverrides): Promise<string>;
        allContents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            string,
            string,
            string,
            BigNumber
        ] & {
            data: string;
            id: string;
            owner: string;
            timestamp: BigNumber;
        }>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<Verify.ContentStructOutput>;
        getContents(overrides?: CallOverrides): Promise<string[]>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        OWNER(overrides?: CallOverrides): Promise<BigNumber>;
        allContents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        getContents(overrides?: CallOverrides): Promise<BigNumber>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        allContents(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        contents(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createContent(data: PromiseOrValue<string>, id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        createReport(id: PromiseOrValue<string>, owner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getContent(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getContents(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getReports(id: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        reports(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

declare type VerifyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
declare class Verify__factory extends ContractFactory {
    constructor(...args: VerifyConstructorParams);
    deploy(_owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<Verify>;
    getDeployTransaction(_owner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): Verify;
    connect(signer: Signer): Verify__factory;
    static readonly bytecode = "0x60806040523480156200001157600080fd5b506040516200121938038062001219833981016040819052620000349162000060565b6000620000428282620001c4565b505062000290565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200007457600080fd5b82516001600160401b03808211156200008c57600080fd5b818501915085601f830112620000a157600080fd5b815181811115620000b657620000b66200004a565b604051601f8201601f19908116603f01168101908382118183101715620000e157620000e16200004a565b816040528281528886848701011115620000fa57600080fd5b600093505b828410156200011e5784840186015181850187015292850192620000ff565b600086848301015280965050505050505092915050565b600181811c908216806200014a57607f821691505b6020821081036200016b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001bf57600081815260208120601f850160051c810160208610156200019a5750805b601f850160051c820191505b81811015620001bb57828155600101620001a6565b5050505b505050565b81516001600160401b03811115620001e057620001e06200004a565b620001f881620001f1845462000135565b8462000171565b602080601f831160018114620002305760008415620002175750858301515b600019600386901b1c1916600185901b178555620001bb565b600085815260208120601f198616915b82811015620002615788860151825594840194600190910190840162000240565b5085821015620002805787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610f7980620002a06000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80634dd0e8af11610076578063a6acce351161005b578063a6acce3514610142578063d611bf9614610165578063f9158e991461017857600080fd5b80634dd0e8af1461010f5780638c9e1f3c1461012257600080fd5b80630a9bbe22146100a8578063117803e3146100d15780631a68638a146100d957806323677ae2146100fa575b600080fd5b6100bb6100b6366004610a3d565b6101a3565b6040516100c89190610aa6565b60405180910390f35b6100bb61024f565b6100ec6100e7366004610b63565b61025c565b6040519081526020016100c8565b610102610286565b6040516100c89190610ba0565b6100ec61011d366004610c1e565b61035f565b610135610130366004610b63565b610504565b6040516100c89190610c6c565b610155610150366004610b63565b6106a9565b6040516100c89493929190610ccf565b610135610173366004610d11565b6107f6565b61018b610186366004610d85565b610991565b6040516001600160a01b0390911681526020016100c8565b600181815481106101b357600080fd5b9060005260206000200160009150905080546101ce90610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546101fa90610dca565b80156102475780601f1061021c57610100808354040283529160200191610247565b820191906000526020600020905b81548152906001019060200180831161022a57829003601f168201915b505050505081565b600080546101ce90610dca565b60008060038360405161026f9190610e04565b908152604051908190036020019020549392505050565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156103565783829060005260206000200180546102c990610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546102f590610dca565b80156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b5050505050815260200190600101906102aa565b50505050905090565b60006002836040516103719190610e04565b9081526020016040518091039020600301546000036103d75760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6104516003846040516103ea9190610e04565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561044657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610428575b5050505050836109d8565b61049d5760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016103ce565b60006003846040516104af9190610e04565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b6105386040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b6002826040516105489190610e04565b908152602001604051809103902060405180608001604052908160008201805461057190610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461059d90610dca565b80156105ea5780601f106105bf576101008083540402835291602001916105ea565b820191906000526020600020905b8154815290600101906020018083116105cd57829003601f168201915b5050505050815260200160018201805461060390610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461062f90610dca565b801561067c5780601f106106515761010080835404028352916020019161067c565b820191906000526020600020905b81548152906001019060200180831161065f57829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906106cf90610dca565b80601f01602080910402602001604051908101604052809291908181526020018280546106fb90610dca565b80156107485780601f1061071d57610100808354040283529160200191610748565b820191906000526020600020905b81548152906001019060200180831161072b57829003601f168201915b50505050509080600101805461075d90610dca565b80601f016020809104026020016040519081016040528092919081815260200182805461078990610dca565b80156107d65780601f106107ab576101008083540402835291602001916107d6565b820191906000526020600020905b8154815290600101906020018083116107b957829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b61082a6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161083a9190610e04565b90815260200160405180910390206003015460001461089b5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016103ce565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906108d5908790610e04565b908152604051908190036020019020815181906108f29082610e6f565b50602082015160018201906109079082610e6f565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905560609091015160039091015560208101516001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601906109889082610e6f565b50949350505050565b815160208184018101805160038252928201918501919091209190528054829081106109bc57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610a3357826001600160a01b0316848281518110610a0157610a01610f2f565b60200260200101516001600160a01b031603610a215760009150506104fe565b80610a2b81610f45565b9150506109dc565b5060019392505050565b600060208284031215610a4f57600080fd5b5035919050565b60005b83811015610a71578181015183820152602001610a59565b50506000910152565b60008151808452610a92816020860160208601610a56565b601f01601f19169290920160200192915050565b602081526000610ab96020830184610a7a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ae757600080fd5b813567ffffffffffffffff80821115610b0257610b02610ac0565b604051601f8301601f19908116603f01168101908282118183101715610b2a57610b2a610ac0565b81604052838152866020858801011115610b4357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610b7557600080fd5b813567ffffffffffffffff811115610b8c57600080fd5b610b9884828501610ad6565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bf557603f19888603018452610be3858351610a7a565b94509285019290850190600101610bc7565b5092979650505050505050565b80356001600160a01b0381168114610c1957600080fd5b919050565b60008060408385031215610c3157600080fd5b823567ffffffffffffffff811115610c4857600080fd5b610c5485828601610ad6565b925050610c6360208401610c02565b90509250929050565b602081526000825160806020840152610c8860a0840182610a7a565b90506020840151601f19848303016040850152610ca58282610a7a565b9150506001600160a01b036040850151166060840152606084015160808401528091505092915050565b608081526000610ce26080830187610a7a565b8281036020840152610cf48187610a7a565b6001600160a01b0395909516604084015250506060015292915050565b600080600060608486031215610d2657600080fd5b833567ffffffffffffffff80821115610d3e57600080fd5b610d4a87838801610ad6565b94506020860135915080821115610d6057600080fd5b50610d6d86828701610ad6565b925050610d7c60408501610c02565b90509250925092565b60008060408385031215610d9857600080fd5b823567ffffffffffffffff811115610daf57600080fd5b610dbb85828601610ad6565b95602094909401359450505050565b600181811c90821680610dde57607f821691505b602082108103610dfe57634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610e16818460208701610a56565b9190910192915050565b601f821115610e6a57600081815260208120601f850160051c81016020861015610e475750805b601f850160051c820191505b81811015610e6657828155600101610e53565b5050505b505050565b815167ffffffffffffffff811115610e8957610e89610ac0565b610e9d81610e978454610dca565b84610e20565b602080601f831160018114610ed25760008415610eba5750858301515b600019600386901b1c1916600185901b178555610e66565b600085815260208120601f198616915b82811015610f0157888601518255948401946001909101908401610ee2565b5085821015610f1f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b600060018201610f6557634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000811000a";
    static readonly abi: ({
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
        name?: undefined;
        outputs?: undefined;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    } | {
        inputs: {
            internalType: string;
            name: string;
            type: string;
        }[];
        name: string;
        outputs: {
            components: {
                internalType: string;
                name: string;
                type: string;
            }[];
            internalType: string;
            name: string;
            type: string;
        }[];
        stateMutability: string;
        type: string;
    })[];
    static createInterface(): VerifyInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Verify;
}

type index_Verify__factory = Verify__factory;
declare const index_Verify__factory: typeof Verify__factory;
declare namespace index {
  export {
    index_Verify__factory as Verify__factory,
  };
}

export { Verify, Verify__factory, Verify$1 as abi, index as factories };
