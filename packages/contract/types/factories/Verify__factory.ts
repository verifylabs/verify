/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Verify, VerifyInterface } from "../Verify";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_owner",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "OWNER",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "contents",
    outputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "contentsByAddress",
    outputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "data",
        type: "string",
      },
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "createContent",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "data",
            type: "string",
          },
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Verify.Content",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "createReport",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
    ],
    name: "getContent",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "data",
            type: "string",
          },
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Verify.Content",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getContentList",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "data",
            type: "string",
          },
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Verify.Content[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "id",
        type: "string",
      },
    ],
    name: "getReports",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "reports",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012e7380380620012e783398101604081905262000034916200010d565b80516200004990600090602084019062000051565b505062000226565b8280546200005f90620001e9565b90600052602060002090601f016020900481019282620000835760008555620000ce565b82601f106200009e57805160ff1916838001178555620000ce565b82800160010185558215620000ce579182015b82811115620000ce578251825591602001919060010190620000b1565b50620000dc929150620000e0565b5090565b5b80821115620000dc5760008155600101620000e1565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200012157600080fd5b82516001600160401b03808211156200013957600080fd5b818501915085601f8301126200014e57600080fd5b815181811115620001635762000163620000f7565b604051601f8201601f19908116603f011681019083821181831017156200018e576200018e620000f7565b816040528281528886848701011115620001a757600080fd5b600093505b82841015620001cb5784840186015181850187015292850192620001ac565b82841115620001dd5760008684830101525b98975050505050505050565b600181811c90821680620001fe57607f821691505b602082108114156200022057634e487b7160e01b600052602260045260246000fd5b50919050565b6110b180620002366000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063a6acce3511610076578063cbba39671161005b578063cbba39671461015d578063d611bf9614610170578063f9158e991461018357600080fd5b8063a6acce351461011a578063b160e0341461013d57600080fd5b8063117803e3146100a85780631a68638a146100c65780634dd0e8af146100e75780638c9e1f3c146100fa575b600080fd5b6100b06101ae565b6040516100bd9190610c9d565b60405180910390f35b6100d96100d4366004610d5a565b61023c565b6040519081526020016100bd565b6100d96100f5366004610db3565b610266565b61010d610108366004610d5a565b61040c565b6040516100bd9190610e59565b61012d610128366004610d5a565b6105b1565b6040516100bd9493929190610e6c565b61015061014b366004610eae565b6106fe565b6040516100bd9190610ec9565b61012d61016b366004610f2b565b6108ba565b61010d61017e366004610f55565b6108fa565b610196610191366004610fc9565b610afb565b6040516001600160a01b0390911681526020016100bd565b600080546101bb9061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546101e79061100e565b80156102345780601f1061020957610100808354040283529160200191610234565b820191906000526020600020905b81548152906001019060200180831161021757829003601f168201915b505050505081565b60008060038360405161024f9190611049565b908152604051908190036020019020549392505050565b60006002836040516102789190611049565b908152602001604051809103902060030154600014156102df5760405162461bcd60e51b815260206004820152601260248201527f436f6e74656e74206e6f7420666f756e6421000000000000000000000000000060448201526064015b60405180910390fd5b6103596003846040516102f29190611049565b908152604080519182900360209081018320805480830285018301909352828452919083018282801561034e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610330575b505050505083610b42565b6103a55760405162461bcd60e51b815260206004820152601c60248201527f4a757374206f6e65207265706f727420666f722061646472657373210000000060448201526064016102d6565b60006003846040516103b79190611049565b908152604051602091819003820190208054600181018255600082815292909220909101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055549150505b92915050565b6104406040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b6002826040516104509190611049565b90815260200160405180910390206040518060800160405290816000820180546104799061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546104a59061100e565b80156104f25780601f106104c7576101008083540402835291602001916104f2565b820191906000526020600020905b8154815290600101906020018083116104d557829003601f168201915b5050505050815260200160018201805461050b9061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546105379061100e565b80156105845780601f1061055957610100808354040283529160200191610584565b820191906000526020600020905b81548152906001019060200180831161056757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260039091015460409091015292915050565b80516020818301810180516002825292820191909301209152805481906105d79061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546106039061100e565b80156106505780601f1061062557610100808354040283529160200191610650565b820191906000526020600020905b81548152906001019060200180831161063357829003601f168201915b5050505050908060010180546106659061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546106919061100e565b80156106de5780601f106106b3576101008083540402835291602001916106de565b820191906000526020600020905b8154815290600101906020018083116106c157829003601f168201915b50505050600283015460039093015491926001600160a01b031691905084565b6001600160a01b0381166000908152600160209081526040808320805482518185028101850190935280835260609492939192909184015b828210156108af57838290600052602060002090600402016040518060800160405290816000820180546107699061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546107959061100e565b80156107e25780601f106107b7576101008083540402835291602001916107e2565b820191906000526020600020905b8154815290600101906020018083116107c557829003601f168201915b505050505081526020016001820180546107fb9061100e565b80601f01602080910402602001604051908101604052809291908181526020018280546108279061100e565b80156108745780601f1061084957610100808354040283529160200191610874565b820191906000526020600020905b81548152906001019060200180831161085757829003601f168201915b505050918352505060028201546001600160a01b03166020808301919091526003909201546040909101529082526001929092019101610736565b505050509050919050565b600160205281600052604060002081815481106108d657600080fd5b9060005260206000209060040201600091509150508060000180546105d79061100e565b61092e6040518060800160405280606081526020016060815260200160006001600160a01b03168152602001600081525090565b60028360405161093e9190611049565b90815260200160405180910390206003015460001461099f5760405162461bcd60e51b815260206004820152601560248201527f496420616c72656164792072656769737465726564000000000000000000000060448201526064016102d6565b60408051608081018252858152602081018590526001600160a01b03841681830152426060820152905181906002906109d9908790611049565b90815260200160405180910390206000820151816000019080519060200190610a03929190610ba8565b506020828101518051610a1c9260018501920190610ba8565b5060408281015160028301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392831617905560609093015160039092019190915590841660009081526001602081815292822080549182018155825290829020835180518594600490940290920192610a9a92849290910190610ba8565b506020828101518051610ab39260018501920190610ba8565b50604082015160028201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909216919091179055606090910151600390910155949350505050565b81516020818401810180516003825292820191850191909120919052805482908110610b2657600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000805b8351811015610b9e57826001600160a01b0316848281518110610b6b57610b6b611065565b60200260200101516001600160a01b03161415610b8c576000915050610406565b80610b968161107b565b915050610b46565b5060019392505050565b828054610bb49061100e565b90600052602060002090601f016020900481019282610bd65760008555610c1c565b82601f10610bef57805160ff1916838001178555610c1c565b82800160010185558215610c1c579182015b82811115610c1c578251825591602001919060010190610c01565b50610c28929150610c2c565b5090565b5b80821115610c285760008155600101610c2d565b60005b83811015610c5c578181015183820152602001610c44565b83811115610c6b576000848401525b50505050565b60008151808452610c89816020860160208601610c41565b601f01601f19169290920160200192915050565b602081526000610cb06020830184610c71565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610cde57600080fd5b813567ffffffffffffffff80821115610cf957610cf9610cb7565b604051601f8301601f19908116603f01168101908282118183101715610d2157610d21610cb7565b81604052838152866020858801011115610d3a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610d6c57600080fd5b813567ffffffffffffffff811115610d8357600080fd5b610d8f84828501610ccd565b949350505050565b80356001600160a01b0381168114610dae57600080fd5b919050565b60008060408385031215610dc657600080fd5b823567ffffffffffffffff811115610ddd57600080fd5b610de985828601610ccd565b925050610df860208401610d97565b90509250929050565b6000815160808452610e166080850182610c71565b905060208301518482036020860152610e2f8282610c71565b9150506001600160a01b036040840151166040850152606083015160608501528091505092915050565b602081526000610cb06020830184610e01565b608081526000610e7f6080830187610c71565b8281036020840152610e918187610c71565b6001600160a01b0395909516604084015250506060015292915050565b600060208284031215610ec057600080fd5b610cb082610d97565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f1e57603f19888603018452610f0c858351610e01565b94509285019290850190600101610ef0565b5092979650505050505050565b60008060408385031215610f3e57600080fd5b610f4783610d97565b946020939093013593505050565b600080600060608486031215610f6a57600080fd5b833567ffffffffffffffff80821115610f8257600080fd5b610f8e87838801610ccd565b94506020860135915080821115610fa457600080fd5b50610fb186828701610ccd565b925050610fc060408501610d97565b90509250925092565b60008060408385031215610fdc57600080fd5b823567ffffffffffffffff811115610ff357600080fd5b610fff85828601610ccd565b95602094909401359450505050565b600181811c9082168061102257607f821691505b6020821081141561104357634e487b7160e01b600052602260045260246000fd5b50919050565b6000825161105b818460208701610c41565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561109d57634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";

type VerifyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verify__factory extends ContractFactory {
  constructor(...args: VerifyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Verify> {
    return super.deploy(_owner, overrides || {}) as Promise<Verify>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  override attach(address: string): Verify {
    return super.attach(address) as Verify;
  }
  override connect(signer: Signer): Verify__factory {
    return super.connect(signer) as Verify__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifyInterface {
    return new utils.Interface(_abi) as VerifyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Verify {
    return new Contract(address, _abi, signerOrProvider) as Verify;
  }
}
